using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions; 
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using TestManager.DataGridCtrl;
using TestManager.Shared;
using TestManager.TreeViewCtrl;
using System.Collections; 
using SharpMule.Automation.Framework.Essentials;
using System.ComponentModel;
using ICSharpCode.AvalonEdit; 

namespace TestManager
{
    /// <summary>
    /// Interaction logic for AdvancedFeaturesWindow.xaml
    /// </summary>
    /// 

    public class TestContainer
    {
        List<TestInterfaceEngine> TestList { get; set; }
        int ID { get; set; }

        public TestContainer(List<TestInterfaceEngine> testList,int InstanceID)
        {
            TestList = testList;
            ID = InstanceID; 
        }

    }
    public partial class AdvancedFeaturesWindow : Window
    {
        public ArrayList TestList { get; set; }
        public List<TestInterfaceEngine> TestCaseObjectList { get; set; }

        public delegate void AddSuiteCompletedHandler(object sender, EventArgs e, TestInterfaceEngine tl,int ID);
        public event AddSuiteCompletedHandler TestSuiteCompleted;

        int activeTestCount;
        int epExecutionCount; 
        string[] endpoints = null;
        Dictionary<int,List<TestInterfaceEngine>> completedSuites;
        List<TestInterfaceEngine> completedTests; 
        List<TestContainer> testContainer;
        List<RichTextBox> logInstances;
        public string currentEndpoint;

        public DataGrid dgResults; 

        public AdvancedFeaturesWindow()
        {
            InitializeComponent();
            TestList = new ArrayList();
            TestCaseObjectList = new List<TestInterfaceEngine>();
            testContainer = new List<TestContainer>();
            logInstances = new List<RichTextBox>();

            currentEndpoint = SharedTasks.Environments.GetEnvironmentByName(SharedTasks.Environments.DefaultEnvironment).DefaultEndpoint; 
            dgResults = AddTabAndGridControl(currentEndpoint);
            
        }

        private void cbSelectAll_Checked(object sender, RoutedEventArgs e)
        {
                foreach (CheckBox item in lbTestList.Items)
                {
                    item.IsChecked = true;
                    ///item.Checked += new RoutedEventHandler(item_Checked);
                }

           
        }

        private void cbSelectAll_Unchecked(object sender, RoutedEventArgs e)
        {
            foreach (CheckBox item in lbTestList.Items)
            {
                item.IsChecked = false;
            }
        }

        public void item_Checked(object sender, RoutedEventArgs e)
        {

            TestList = GetCheckedTestCases();
            DataGridTasks.FillDataGridWithTests(dgResults, TestList);

        }

        public  ArrayList GetCheckedTestCases()
        {
            ArrayList list = new ArrayList(); 
            foreach(CheckBox item in lbTestList.Items)
            {
                if(item.IsChecked==true)
                    list.Add(item.Tag); 
            }


            return list; 

        }

        public DataGrid AddTabAndGridControl(string epName)
        {
            TabItem tbItem = new TabItem();
            tbItem.Header = epName;

            DataGrid dgItem = new DataGrid();
            dgItem.AutoGenerateColumns = true;
            dgItem.BorderThickness = new Thickness(0, 0, 0, 0); 
            dgItem.CanUserSortColumns = false;
            dgItem.HorizontalGridLinesBrush = Brushes.Black;
            dgItem.IsReadOnly = true;
           
            dgItem.VerticalGridLinesBrush = Brushes.Black;
            dgItem.AutoGeneratedColumns += new EventHandler(dgTestViewer_AutoGeneratedColumns);
            dgItem.MouseDoubleClick += new MouseButtonEventHandler(dgTestViewer_MouseDoubleClick);
            dgItem.LoadingRow += new EventHandler<DataGridRowEventArgs>(dgTestViewer_LoadingRow);
            dgItem.Height = 1000;
            

            tbItem.Content = dgItem;
            


            tabctrlLogs.Items.Add(tbItem);

            

            //<DataGrid AutoGenerateColumns="true" BorderThickness="0" CanUserSortColumns="False" HorizontalGridLinesBrush="#66000000"
            //IsReadOnly="True" Name="dgResults" VerticalGridLinesBrush="#69000000" 
            //AutoGeneratedColumns="dgTestViewer_AutoGeneratedColumns" MouseDoubleClick="dgTestViewer_MouseDoubleClick" 
            //LoadingRow="dgTestViewer_LoadingRow" FontFamily="Consolas" Grid.ColumnSpan="7" Margin="0,0,0,-1" />

            return dgItem; 
        }

        public void item_Unchecked(object sender, RoutedEventArgs e)
        {
            TestList = GetCheckedTestCases();
            DataGridTasks.FillDataGridWithTests(dgResults, TestList);
        }

        private void btnExecute_Click(object sender, RoutedEventArgs e)
        {

            //activeTestCount = 0;

            endpoints = txtEndPointsList.Text.Split(','); 

            epExecutionCount = 0; 
            
        
           btnExecute.IsEnabled = true;

            ExecuteTests(); 


          
            
        }



        public void ExecuteTests()
        {
            TestSuiteCompleted -= AdvancedFeaturesWindow_TestSuiteCompleted;
            List<TestInterfaceEngine> testList = new List<TestInterfaceEngine>();
            epExecutionCount++;
            

            for (int j = 0; j < TestList.Count; j++)
            {

                TestInterfaceEngine test = new TestInterfaceEngine();
                test.InstanceID = j;
                test.ScriptSetup(TestList[j].ToString(), TestCaseObjectList[j].TestCaseFileName);
                test.CommandLib.Variables["$TRIP"] = currentEndpoint; 
                testList.Add(test);
                activeTestCount++;
            }

            ExecuteTests(testList); 
        }

        private void AddNewLogTab(string tabHeader,out RichTextBox logViewer)
        {
            logViewer = new RichTextBox();
            //logViewer.Width = rtbLog.Width; 
            //logViewer.Height = rtbLog.Height;
            
           
            
            TabItem log = new TabItem();
            log.Header = tabHeader;
            log.Content = logViewer;

            tabctrlLogs.Items.Add(log);
            
             
        }
        private void ExecuteTests(List<TestInterfaceEngine> testList)
        {

            completedTests = new List<TestInterfaceEngine>();
            completedSuites = new Dictionary<int, List<TestInterfaceEngine>>();
            pbTests.Value = 0;
           /// rtbLog.Document.Blocks.Clear(); 
            btnExecute.IsEnabled = false; 
            pbTests.Maximum = testList.Count;


            TestSuiteCompleted += new AddSuiteCompletedHandler(AdvancedFeaturesWindow_TestSuiteCompleted);

            for (int i = 0; i < testList.Count;i++ )
            {
                TestInterfaceEngine test = testList[i];

               

                using (BackgroundWorker _worker = new BackgroundWorker())
                {
                    _worker.DoWork += delegate(object s, System.ComponentModel.DoWorkEventArgs args)
                    {
                        test.ScriptExecute();
                    };
                    _worker.RunWorkerCompleted += delegate(object s, System.ComponentModel.RunWorkerCompletedEventArgs e)
                    {
                        pbTests.Value++;

                        OnTestSuiteCompleted(EventArgs.Empty, test, 0);
                        _worker.Dispose();

                    };
                    _worker.RunWorkerAsync(5000);
                }
            }

        }

        void AdvancedFeaturesWindow_TestSuiteCompleted(object sender, EventArgs e, TestInterfaceEngine tl,int ID)
        {
            completedTests.Add(tl);
            DataGridTasks.UpdateDataGridAtSuiteCompleted(dgResults, tl);
            

            if (completedTests.Count == activeTestCount)
            {
                if (epExecutionCount < endpoints.Count())
                {
                    currentEndpoint = endpoints[epExecutionCount]; 
                    dgResults = AddTabAndGridControl(currentEndpoint);
                    DataGridTasks.FillDataGridWithTests(dgResults, TestList);
                    ExecuteTests();
                }
                else
                {
                    btnExecute.IsEnabled = true; 

                }
            }
        }

        protected virtual void OnTestSuiteCompleted(EventArgs e, TestInterfaceEngine tl,int id)
        {
            if (TestSuiteCompleted != null)
                TestSuiteCompleted(this, e, tl,id);
        }


        private void LogResult(List<TestInterfaceEngine> completedTests)
        {
            RichTextBox txtResult = new RichTextBox();


            int curInstID = 0;
            List<TestInterfaceEngine> sameTestInstances = new List<TestInterfaceEngine>();
            Dictionary<int,List<TestInterfaceEngine>> dictInstances= new Dictionary<int,List<TestInterfaceEngine>>();
            foreach (TestInterfaceEngine test in completedTests)
            {

                if (test.InstanceID == curInstID)
                    sameTestInstances.Add(test);
                else
                    dictInstances.Add(test.InstanceID, sameTestInstances);

                curInstID = test.InstanceID;
            }

            for(int i=0;i<dictInstances.Count;i++)
            {
                
                AddNewLogTab(endpoints[i],out txtResult);


                foreach (TestInterfaceEngine test in completedTests)
                {
                    //TextRange testName = new TextRange(txtResult.Document.ContentEnd, txtResult.Document.ContentEnd);
                    //TextRange testResult = new TextRange(txtResult.Document.ContentEnd, txtResult.Document.ContentEnd);
                    //TextRange testLog = new TextRange(txtResult.Document.ContentEnd, txtResult.Document.ContentEnd);
                    txtResult.AppendText(test.TestCaseName);

                    if (SharedTasks.GetTestCaseResult(test))
                    {
                        txtResult.AppendText("[PASS]" + Environment.NewLine);

                        //testResult.Text += " [PASS]"+Environment.NewLine; 
                        //testResult.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Green);

                    }
                    else
                    {
                        txtResult.AppendText("[FAIL]" + Environment.NewLine);
                        //testResult.Text += " [FAIL]" + Environment.NewLine;
                        //testResult.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.DarkRed);
                        txtResult.AppendText("-[LOG]" + SharedTasks.GetFailedTestStepLog(test));
                        //testLog.Text = SharedTasks.GetFailedTestStepLog(test);
                        //testLog.ApplyPropertyValue(TextElement.ForegroundProperty, Brushes.Red);
                    }


                }
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            
        }
        private void dgTestViewer_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataGrid dg = sender as DataGrid; 
            dg.Columns[0].Width = 570; //Nr
            dg.Columns[1].Width = 100; //Lp
        }
        private void dgTestViewer_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            //MessageBox.Show("Test");
            // Get the DataRow corresponding to the DataGridRow that is loading.
            Data item = e.Row.Item as Data;
            DataGridRow row = e.Row;
            if (item != null)
            {
                // Access cell values values if needed...
                // var colValue = row["ColumnName1]";
                // var colValue2 = row["ColumName2]";
                if (item.TestResult.ToLower().Equals("fail"))
                    row.Background = Brushes.PaleVioletRed;
                else if (item.TestResult.ToLower().Equals("pass"))
                    row.Background = Brushes.LightGreen;


            }
        }

        private void dgTestViewer_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            DataGridColumn col = ((DataGrid)sender).CurrentColumn;

            int row = ((DataGrid)sender).SelectedIndex;

            if (col != null)
            {
                string log = SharedTasks.GetFailedTestStepLog(completedTests[row]); 
                Viewer viewer = new Viewer();
                viewer.SetText(log.Equals(String.Empty)?"Everythign Looks Good. All Steps of this TestCase have passed":log); 
                viewer.Show();

            }
        }
    }
}
