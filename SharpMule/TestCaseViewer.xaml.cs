using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Diagnostics;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using TestManager.DataGridCtrl;
using TestManager.TreeViewCtrl;
using TestManager.Shared;
using SharpMule.Automation.Framework.Essentials;

namespace TestManager
{
    /// <summary>
    /// Interaction logic for TestCaseViewer.xaml
    /// </summary>
    public partial class TestCaseViewer : Window
    {

        public TestCaseViewer()
        {
            InitializeComponent();
            EnableFindTextControl();
        }

 
        public string SetEditorText
        {
            set
            {
                 txtScriptEditor.Text = value;
            }

        }
        private static string GetSpecificContent(string filename)
        {
            if (File.Exists(SharedTasks.CurrentTestPath + filename))
                return File.ReadAllText(SharedTasks.CurrentTestPath + filename);

            return String.Empty;
        }
        public object ScriptEditor_NewTab(string selectedText, out TabItem newTabItem)
        {
            newTabItem = null;
            TextBox newTextBox = new TextBox();


            string text = GetSpecificContent(selectedText);

            if (!text.Equals(String.Empty) && !IsTabItemOpen(tcScriptView, selectedText))
            {
                newTabItem = new TabItem();
                newTabItem.Header = selectedText;
                newTextBox.Text = text;
                newTextBox.HorizontalScrollBarVisibility = ScrollBarVisibility.Auto;
                newTextBox.VerticalScrollBarVisibility = ScrollBarVisibility.Auto;
                newTextBox.MouseDoubleClick += new MouseButtonEventHandler(txtScriptEditor_MouseDoubleClick);
                   
                newTabItem.Content = newTextBox;
                newTabItem.IsSelected = true;
                newTabItem.MouseDoubleClick += new MouseButtonEventHandler(TabItem_MouseDoubleClick);

                return tcScriptView;

            }

            return null;

        }
        private bool IsTabItemOpen(TabControl tcScript, string value)
        {
            foreach (TabItem item in tcScript.Items)
            {
                if (item.Header.Equals(value))
                    return true;
            }

            return false;
        }

        private void txtScriptEditor_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            string selectedText = ((TextBox)sender).SelectedText + ".tc";

            TabItem newTabItem = null;
            TabControl tcScript = ScriptEditor_NewTab(selectedText, out newTabItem) as TabControl;

            if (newTabItem != null)
                tcScript.Items.Add(newTabItem);

        }

      

        private void dgTestViewer_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dgTestViewer.Columns[0].Width = dgTestViewer.Width - 220; //Nr
            dgTestViewer.Columns[1].Width = 100; //Lp
            dgTestViewer.Columns[2].Width = 100; //Lp
        }

        
        public void ChangeRunButtonState(string name, bool isEnabled)
        {
            btnRunSave.IsEnabled = isEnabled;
            btnRunSave.Content = name;
        }
        void _worker_RunTest(object sender, System.ComponentModel.DoWorkEventArgs e)
        {
            //SharedTasks.TaskLibInstance.CommandLib.Log.LogStorage.Clear();
            if (TryStartNewInstance())
                SharedTasks.TaskLibInstance.ScriptExecute();

        }
        public bool TryStartNewInstance()
        {
            SharedTasks.SetNewInstance(SharedTasks.CurrentTestPath);
            if (SharedTasks.TaskLibInstance.CommandLib.Commands.Count > 0)
                return true;
            else
                return false;
        }
        private void btnRunSave_Click(object sender, RoutedEventArgs e)
        {
            if (btnRunSave.Content.Equals("Run"))
            {

                ChangeRunButtonState("Running...", false);
                using (System.ComponentModel.BackgroundWorker _worker = new System.ComponentModel.BackgroundWorker())
                {
                    _worker.DoWork += new System.ComponentModel.DoWorkEventHandler(_worker_RunTest);
                    _worker.RunWorkerCompleted += _worker_RunWorkerCompleted;
                    _worker.RunWorkerAsync(5000);
                }
            }
            else if (btnRunSave.Content.Equals("Save"))
            {
                btnRunSave.IsEnabled = false;

            
            }
            else
            {
                throw new Exception("You should never get here. Your code is making invalid modifications at run time");
            }
        }
      

        void _worker_RunWorkerCompleted(object sender, System.ComponentModel.RunWorkerCompletedEventArgs e)
        {
            if (e.Cancelled)
            {
                MessageBox.Show("Cancelled");
            }
            else if (e.Error != null)
            {
                MessageBox.Show("Exception Thrown");
            }
            else
            {
                DataGridTasks.UpdateDataGridAtComplete(dgTestViewer, SharedTasks.TaskLibInstance);
                ChangeRunButtonState("Run", true);
                
            }

        }
       
        private void tcTestViewer_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (tabItemEdit.IsSelected)
            {
                btnRunSave.Content = "Save";
                btnRunSave.IsEnabled = false;
            }
            if (tabItemView.IsSelected)
            {
                btnRunSave.Content = "Run";
                btnRunSave.IsEnabled = true; 
            }
        }
        void TabItem_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
             var originalSource = e.OriginalSource as System.Windows.Media.Visual;

             if (!originalSource.DependencyObjectType.Name.Equals("TextBoxView"))
             {
                 TabItem name = sender as TabItem;

                 string editor = SharedTasks.Editor.External.Path;
                 string file = SharedTasks.CurrentTestPath + name.Header;

                 ProcessStartInfo procStartInfo = new ProcessStartInfo();
                 procStartInfo.FileName = editor;
                 procStartInfo.Arguments = file;
                 Process proc = new Process();
                 proc.StartInfo = procStartInfo;
                 proc.Start();
             }

        }

        public void dgTestViewer_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            DataGridColumn col = ((DataGrid)sender).CurrentColumn;
            
            int row = ((DataGrid)sender).SelectedIndex;

            if (col!=null)
            {

                Viewer viewer = new Viewer();
                viewer.SetText(SharedTasks.TaskLibInstance, row);
                viewer.Show();

            }

            e.Handled = true; 
        }

        



        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            ((TestCaseViewer)sender).Hide();
            e.Cancel = true;
        }

        private void txtScriptEditor_TextChanged(object sender, EventArgs e)
        {
            btnRunSave.IsEnabled = true; 
            SharedTasks.Editor.Internal.Text = ((TextBox)sender).Text;
        }
        public void EnableFindTextControl()
        {

            FindReplace.FindReplaceMgr FRM = new FindReplace.FindReplaceMgr();
            FRM.CurrentEditor = new FindReplace.TextEditorAdapter(txtScriptEditor);
            FRM.ShowSearchIn = false;
            FRM.OwnerWindow = this;

            CommandBindings.Add(FRM.FindBinding);
            CommandBindings.Add(FRM.ReplaceBinding);
            CommandBindings.Add(FRM.FindNextBinding);
        }

        private void dgTestViewer_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            //MessageBox.Show("Test");
            // Get the DataRow corresponding to the DataGridRow that is loading.
            Data item = e.Row.Item as Data;
            DataGridRow row = e.Row;
            if (item != null)
            {
                // Access cell values values if needed...
                // var colValue = row["ColumnName1]";
                // var colValue2 = row["ColumName2]";
                if (item.TestResult.ToLower().Equals("fail"))
                    row.Background = Brushes.PaleVioletRed;
                else if (item.TestResult.ToLower().Equals("pass"))
                    row.Background = Brushes.LightGreen;


            }
        }

    }
}
